[user]
	name = thiagoalberici-eng
	email = eng.thiagoalberici@gmail.com
[credential]
	helper = cache
[core]
	editor = code --wait
[init]
    defaultBranch = main
[alias]
  # Who am I?
  me = config user.name
  # Add all files to staged area
  a = add --all
  # Remove files from staged area
  unstage = reset HEAD --
  # Commit with message
  c = "!f() { git commit -m \"$*\"; }; f"
  # Undo the last made commit
  rollback = reset --soft HEAD~1
  # Amend the previous commit to include new changes
  amend = commit --amend --no-edit
  # Less verbose status
  s = status -sb
  # Pretty log
  l = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  # Remove files cached but on git ignore
  rm = rm -r --chached .
  # Push staging
  p = push
  # force push to a branch
  pf = push --force origin
  # create a new branch
  bn = checkout -b
  # delete a branch
  bd = branch -d
  # move to a branch
  bm = checkout
  # list all branches
  bl = branch -a  
  # merge a branch
  m = merge  
  # Syncronize local branchs with remote
  fe = fetch origin
  # Remote commits ahead of mine
  incoming = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' ..@{u})
  # Remote commits ahead of local
  outgoing = !(git fetch --quiet && git log --pretty=format:'%C(yellow)%h %C(white)- %C(red)%an %C(white)- %C(cyan)%d%Creset %s %C(white)- %ar%Creset' @{u}..)
  # Undo modifications to a file
  undo = checkout --
  # Review commits before pushing
  review = rebase -i @{u}
  # Resolve conflict using ours
  resolve-ours = !(grep -lr '<<<<<<<' . | xargs git checkout --ours)
  # Resolve conflict using theirs
  resolve-theirs = !(grep -lr '<<<<<<<' . | xargs git checkout --theirs)
  # List committers
  committers = !(git log | grep Author | sort | uniq -c | sort -n -r)
  # Update submodules
  submodules = submodule update --init --recursive
  # Refresh the hole project
  refresh = !(git fetch && git pull && git submodule update --init --recursive && git status)%   
